local MAJOR_VERSION = "LibStats-Mod"
local MINOR_VERSION = tonumber(("$Revision: 98899 $"):sub(12, -3))

local LibStats = LibStub:NewLibrary(MAJOR_VERSION, MINOR_VERSION)

function LibStats:argCheck(argument, number, ...)
    local arg = {...}
    local validTypeString = table.concat(arg, ", ")
    local t = type(argument)
    assert(
        arg[1] == t or
        arg[2] == t or
        arg[3] == t or
        arg[4] == t or
        arg[5] == t,
        "Bad argument #"..tostring(number).." ("..validTypeString.." expected, got "..t..")"
    )
end

local _G = getfenv(0)
local strfind = strfind
local strsub = strsub
local strupper = strupper
local strutf8lower = string.utf8lower
local strmatch = strmatch
local strtrim = strtrim
local strsplit = strsplit
local strjoin = strjoin
local gmatch = gmatch
local gsub = gsub
local strutf8sub = string.utf8sub
local pairs = pairs
local ipairs = ipairs
local type = type
local loadstring = loadstring
local GetInventoryItemLink = GetInventoryItemLink
local unpack = unpack
local GetLocale = GetLocale
local IsUsableSpell = IsUsableSpell
local UnitLevel = UnitLevel
local UnitStat = UnitStat
local GetShapeshiftForm = GetShapeshiftForm
local GetShapeshiftFormInfo = GetShapeshiftFormInfo
local GetTalentInfo = GetTalentInfo
local floor = math.floor



local ClassNameToID = {
    "WARRIOR",
    "PALADIN",
    "HUNTER",
    "ROGUE",
    "PRIEST",
    "SHAMAN",
    "MAGE",
    "WARLOCK",
    "DRUID",
    ["WARRIOR"] = 1,
    ["PALADIN"] = 2,
    ["HUNTER"] = 3,
    ["ROGUE"] = 4,
    ["PRIEST"] = 5,
    ["SHAMAN"] = 6,
    ["MAGE"] = 7,
    ["WARLOCK"] = 8,
    ["DRUID"] = 9,
}

local RaceNameToID = {
    "Human",
    "Orc",
    "Dwarf",
    "NightElf",
    "Scourge",
    "Tauren",
    "Gnome",
    "Troll",
    "Goblin",
    "BloodElf",
    "Draenei",
    ["Human"] = 1,
    ["Orc"] = 2,
    ["Dwarf"] = 3,
    ["NightElf"] = 4,
    ["Scourge"] = 5,
    ["Tauren"] = 6,
    ["Gnome"] = 7,
    ["Troll"] = 8,
    ["Goblin"] = 9,
    ["BloodElf"] = 10,
    ["Draenei"] = 11,
}

local RatingIDToConvertedStat = {
    "WEAPON_SKILL",
    "DEFENSE",
    "DODGE",
    "PARRY",
    "BLOCK",
    "MELEE_HIT",
    "RANGED_HIT",
    "SPELL_HIT",
    "MELEE_CRIT",
    "RANGED_CRIT",
    "SPELL_CRIT",
    "MELEE_HIT_AVOID",
    "RANGED_HIT_AVOID",
    "SPELL_HIT_AVOID",
    "MELEE_CRIT_AVOID",
    "RANGED_CRIT_AVOID",
    "SPELL_CRIT_AVOID",
    "MELEE_HASTE",
    "RANGED_HASTE",
    "SPELL_HASTE",
    "WEAPON_SKILL",
    "WEAPON_SKILL",
    "WEAPON_SKILL",
    "EXPERTISE",
    "RESILIENCE"
}

if not CR_WEAPON_SKILL then CR_WEAPON_SKILL = 1 end;
if not CR_DEFENSE_SKILL then CR_DEFENSE_SKILL = 2 end;
if not CR_DODGE then CR_DODGE = 3 end;
if not CR_PARRY then CR_PARRY = 4 end;
if not CR_BLOCK then CR_BLOCK = 5 end;
if not CR_HIT_MELEE then CR_HIT_MELEE = 6 end;
if not CR_HIT_RANGED then CR_HIT_RANGED = 7 end;
if not CR_HIT_SPELL then CR_HIT_SPELL = 8 end;
if not CR_CRIT_MELEE then CR_CRIT_MELEE = 9 end;
if not CR_CRIT_RANGED then CR_CRIT_RANGED = 10 end;
if not CR_CRIT_SPELL then CR_CRIT_SPELL = 11 end;
if not CR_HIT_TAKEN_MELEE then CR_HIT_TAKEN_MELEE = 12 end;
if not CR_HIT_TAKEN_RANGED then CR_HIT_TAKEN_RANGED = 13 end;
if not CR_HIT_TAKEN_SPELL then CR_HIT_TAKEN_SPELL = 14 end;
if not CR_CRIT_TAKEN_MELEE then CR_CRIT_TAKEN_MELEE = 15 end;
if not CR_CRIT_TAKEN_RANGED then CR_CRIT_TAKEN_RANGED = 16 end;
if not CR_CRIT_TAKEN_SPELL then CR_CRIT_TAKEN_SPELL = 17 end;
if not CR_HASTE_MELEE then CR_HASTE_MELEE = 18 end;
if not CR_HASTE_RANGED then CR_HASTE_RANGED = 19 end;
if not CR_HASTE_SPELL then CR_HASTE_SPELL = 20 end;
if not CR_WEAPON_SKILL_MAINHAND then CR_WEAPON_SKILL_MAINHAND = 21 end;
if not CR_WEAPON_SKILL_OFFHAND then CR_WEAPON_SKILL_OFFHAND = 22 end;
if not CR_WEAPON_SKILL_RANGED then CR_WEAPON_SKILL_RANGED = 23 end;
if not CR_EXPERTISE then CR_EXPERTISE = 24 end;
if not CR_RESILIENCE then CR_RESILIENCE = 25 end;

local RatingNameToID = {
    [CR_WEAPON_SKILL] = "WEAPON_RATING",
    [CR_DEFENSE_SKILL] = "DEFENSE_RATING",
    [CR_DODGE] = "DODGE_RATING",
    [CR_PARRY] = "PARRY_RATING",
    [CR_BLOCK] = "BLOCK_RATING",
    [CR_HIT_MELEE] = "MELEE_HIT_RATING",
    [CR_HIT_RANGED] = "RANGED_HIT_RATING",
    [CR_HIT_SPELL] = "SPELL_HIT_RATING",
    [CR_CRIT_MELEE] = "MELEE_CRIT_RATING",
    [CR_CRIT_RANGED] = "RANGED_CRIT_RATING",
    [CR_CRIT_SPELL] = "SPELL_CRIT_RATING",
    [CR_HIT_TAKEN_MELEE] = "MELEE_HIT_AVOID_RATING",
    [CR_HIT_TAKEN_RANGED] = "RANGED_HIT_AVOID_RATING",
    [CR_HIT_TAKEN_SPELL] = "SPELL_HIT_AVOID_RATING",
    [CR_CRIT_TAKEN_MELEE] = "MELEE_CRIT_AVOID_RATING",
    [CR_CRIT_TAKEN_RANGED] = "RANGED_CRIT_AVOID_RATING",
    [CR_CRIT_TAKEN_SPELL] = "SPELL_CRIT_AVOID_RATING",
    [CR_HASTE_MELEE] = "MELEE_HASTE_RATING",
    [CR_HASTE_RANGED] = "RANGED_HASTE_RATING",
    [CR_HASTE_SPELL] = "SPELL_HASTE_RATING",
    [CR_WEAPON_SKILL_MAINHAND] = "MAINHAND_WEAPON_RATING",
    [CR_WEAPON_SKILL_OFFHAND] = "OFFHAND_WEAPON_RATING",
    [CR_WEAPON_SKILL_RANGED] = "RANGED_WEAPON_RATING",
    [CR_EXPERTISE] = "EXPERTISE_RATING",
    [CR_RESILIENCE] = "RESILIENCE_RATING",
    ["DEFENSE_RATING"] = CR_DEFENSE_SKILL,
    ["DODGE_RATING"] = CR_DODGE,
    ["PARRY_RATING"] = CR_PARRY,
    ["BLOCK_RATING"] = CR_BLOCK,
    ["MELEE_HIT_RATING"] = CR_HIT_MELEE,
    ["RANGED_HIT_RATING"] = CR_HIT_RANGED,
    ["SPELL_HIT_RATING"] = CR_HIT_SPELL,
    ["MELEE_CRIT_RATING"] = CR_CRIT_MELEE,
    ["RANGED_CRIT_RATING"] = CR_CRIT_RANGED,
    ["SPELL_CRIT_RATING"] = CR_CRIT_SPELL,
    ["MELEE_HIT_AVOID_RATING"] = CR_HIT_TAKEN_MELEE,
    ["RANGED_HIT_AVOID_RATING"] = CR_HIT_TAKEN_RANGED,
    ["SPELL_HIT_AVOID_RATING"] = CR_HIT_TAKEN_SPELL,
    ["MELEE_CRIT_AVOID_RATING"] = CR_CRIT_TAKEN_MELEE,
    ["RANGED_CRIT_AVOID_RATING"] = CR_CRIT_TAKEN_RANGED,
    ["SPELL_CRIT_AVOID_RATING"] = CR_CRIT_TAKEN_SPELL,
    ["RESILIENCE_RATING_OLD"] = CR_CRIT_TAKEN_MELEE,
    ["MELEE_HASTE_RATING"] = CR_HASTE_MELEE,
    ["RANGED_HASTE_RATING"] = CR_HASTE_RANGED,
    ["SPELL_HASTE_RATING"] = CR_HASTE_SPELL,
    ["DAGGER_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["SWORD_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["2H_SWORD_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["AXE_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["2H_AXE_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["MACE_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["2H_MACE_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["GUN_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["CROSSBOW_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["BOW_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["FERAL_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["FIST_WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["WEAPON_RATING"] = CR_WEAPON_SKILL,
    ["MAINHAND_WEAPON_RATING"] = CR_WEAPON_SKILL_MAINHAND,
    ["OFFHAND_WEAPON_RATING"] = CR_WEAPON_SKILL_OFFHAND,
    ["RANGED_WEAPON_RATING"] = CR_WEAPON_SKILL_RANGED,
    ["EXPERTISE_RATING"] = CR_EXPERTISE,
    ["RESILIENCE_RATING"] = CR_RESILIENCE,
}


--============--
-- Base Stats --
--============--
-- str agi sta int spi
local RaceClassStatOffset = {
    ["Human"] = {0, 0, 0, 0, 0},
    ["Dwarf"] = {2, -4, 3, -1, -1},
    ["NightElf"] = {-3, 5, -1, 0, 0},
    ["Gnome"] = {-5, 3, -1, 3, 0},
    ["Draenei"] = {1, -3, 0, 0, 2},
    ["Orc"] = {3, -3, 2, -3, 3},
    ["Scourge"] = {-1, -2, 1, -2, 5},
    ["Tauren"] = {5, -5, 2, -5, 2},
    ["Troll"] = {1, 2, 1, -4, 1},
    ["BloodElf"] = {-3, 2, 0, 3, -2},
}

-- str agi sta int spi
local ClassBaseStat = {
    ["WARRIOR"] = {
        -- STR
        {
            23, 24, 25, 26, 28, 29, 30, 31, 32, 33,  --   1-10
            35, 36, 37, 39, 40, 41, 42, 44, 45, 47,  --  11-20
            48, 49, 51, 52, 54, 55, 57, 58, 60, 62,  --  21-30
            63, 65, 66, 68, 70, 72, 73, 75, 77, 79,  --  31-40
            80, 82, 84, 86, 88, 90, 92, 94, 96, 98,  --  41-50
            100, 102, 104, 106, 109, 111, 113, 115, 118, 120,  --  51-60
            122, 125, 127, 130, 132, 135, 137, 140, 142, 145,  --  61-70
        },
        -- AGI
        {
            20, 21, 21, 22, 23, 24, 24, 25, 26, 26,  --   1-10
            27, 28, 29, 30, 30, 31, 32, 33, 34, 35,  --  11-20
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44,  --  21-30
            45, 46, 47, 48, 49, 50, 51, 52, 53, 54,  --  31-40
            56, 57, 58, 59, 60, 61, 63, 64, 65, 66,  --  41-50
            68, 69, 70, 72, 73, 74, 76, 77, 79, 80,  --  51-60
            81, 83, 84, 86, 88, 89, 91, 92, 94, 96,  --  61-70
        },
        -- sta
        {
            22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  --   1-10
            33, 34, 35, 36, 37, 38, 40, 41, 42, 43,  --  11-20
            45, 46, 47, 49, 50, 51, 53, 54, 56, 57,  --  21-30
            58, 60, 61, 63, 64, 66, 68, 69, 71, 72,  --  31-40
            74, 76, 77, 79, 81, 83, 84, 86, 88, 90,  --  41-50
            92, 94, 96, 98, 100, 102, 104, 106, 108, 110,  --  51-60
            112, 114, 117, 119, 121, 123, 126, 128, 130, 133,  --  61-70
        },
        -- INT
        {
            20, 20, 20, 20, 20, 21, 21, 21, 21, 21,  --   1-10
            21, 21, 21, 22, 22, 22, 22, 22, 22, 22,  --  11-20
            23, 23, 23, 23, 23, 23, 23, 24, 24, 24,  --  21-30
            24, 24, 24, 25, 25, 25, 25, 25, 26, 26,  --  31-40
            26, 26, 26, 26, 27, 27, 27, 27, 28, 28,  --  41-50
            28, 28, 28, 29, 29, 29, 29, 30, 30, 30,  --  51-60
            30, 30, 31, 31, 31, 32, 32, 32, 32, 33,  --  61-70
        },
        -- SPI
        {
            20, 20, 21, 21, 21, 21, 22, 22, 22, 23,  --   1-10
            23, 23, 24, 24, 24, 25, 25, 25, 26, 26,  --  11-20
            26, 27, 27, 28, 28, 28, 29, 29, 30, 30,  --  21-30
            30, 31, 31, 32, 32, 33, 33, 33, 34, 34,  --  31-40
            35, 35, 36, 36, 37, 37, 38, 38, 39, 39,  --  41-50
            40, 40, 41, 42, 42, 43, 43, 44, 44, 45,  --  51-60
            46, 46, 47, 47, 48, 49, 49, 50, 51, 51,  --  61-70
        },
        -- HEAL
        {
            20, 29, 38, 47, 56, 65, 74, 83, 92, 101,  --   1-10
            100, 109, 118, 128, 139, 151, 154, 168, 183, 199,  --  11-20
            206, 224, 243, 253, 274, 296, 309, 333, 348, 374,  --  21-30
            401, 419, 448, 468, 499, 521, 545, 581, 609, 649,  --  31-40
            681, 715, 761, 799, 839, 881, 935, 981, 1029, 1079,  --  41-50
            1131, 1185, 1241, 1299, 1359, 1421, 1485, 1551, 1619, 1689,  --  51-60
            1902, 2129, 2357, 2612, 2883, 3154, 3440, 3758, 4092, 4444,  --  61-7
        },
        -- MANA
        nil
    },
    ["PALADIN"] = {
        --  STR
        {
            22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  --   1-10
            32, 33, 34, 35, 36, 38, 39, 40, 41, 42,  --  11-20
            43, 45, 46, 47, 48, 50, 51, 52, 54, 55,  --  21-30
            56, 58, 59, 61, 62, 64, 65, 67, 68, 70,  --  31-40
            71, 73, 74, 76, 78, 79, 81, 83, 84, 86,  --  41-50
            88, 90, 92, 93, 95, 97, 99, 101, 103, 105,  --  51-60
            107, 109, 111, 113, 115, 118, 120, 122, 124, 126,  --  61-70
        },
        --  AGI
        {
            20, 21, 21, 22, 22, 23, 23, 24, 24, 25,  --   1-10
            25, 26, 27, 27, 28, 28, 29, 30, 30, 31,  --  11-20
            32, 32, 33, 34, 34, 35, 36, 36, 37, 38,  --  21-30
            39, 39, 40, 41, 42, 43, 43, 44, 45, 46,  --  31-40
            47, 47, 48, 49, 50, 51, 52, 53, 54, 55,  --  41-50
            56, 57, 58, 59, 60, 61, 62, 63, 64, 65,  --  51-60
            66, 67, 68, 69, 71, 72, 73, 74, 75, 77,  --  61-70
        },
        --  STA
        {
            22, 23, 24, 25, 26, 27, 28, 28, 29, 30,  --   1-10
            31, 32, 33, 34, 36, 37, 38, 39, 40, 41,  --  11-20
            42, 43, 44, 46, 47, 48, 49, 50, 52, 53,  --  21-30
            54, 56, 57, 58, 60, 61, 62, 64, 65, 67,  --  31-40
            68, 70, 71, 73, 74, 76, 77, 79, 81, 82,  --  41-50
            84, 86, 87, 89, 91, 93, 94, 96, 98, 100,  --  51-60
            102, 104, 106, 108, 110, 112, 114, 116, 116, 120,  --  61-70
        },
        --  INT
        {
            20, 21, 21, 22, 22, 23, 24, 24, 25, 25,  --   1-10
            26, 27, 27, 28, 29, 29, 30, 31, 31, 32,  --  11-20
            33, 34, 34, 35, 36, 37, 37, 38, 39, 40,  --  21-30
            41, 42, 42, 43, 44, 45, 46, 47, 48, 49,  --  31-40
            50, 51, 52, 52, 53, 54, 56, 57, 58, 59,  --  41-50
            60, 61, 62, 63, 64, 65, 66, 68, 69, 70,  --  51-60
            71, 72, 74, 75, 76, 78, 79, 80, 83, 83,  --  61-70
        },
        --  SPI
        {
            21, 22, 22, 23, 24, 24, 25, 25, 26, 27,  --   1-10
            28, 28, 29, 30, 30, 31, 32, 33, 33, 34,  --  11-20
            35, 36, 37, 37, 38, 39, 40, 41, 42, 42,  --  21-30
            43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  --  31-40
            53, 54, 55, 56, 57, 58, 59, 60, 62, 63,  --  41-50
            64, 65, 66, 67, 69, 70, 71, 72, 74, 75,  --  51-60
            76, 78, 79, 80, 82, 83, 85, 86, 88, 89,  --  61-70
        },
        --  HEAL
        {
            18, 26, 34, 42, 50, 58, 66, 84, 92, 100,  --   1-10
            108, 116, 124, 132, 131, 141, 152, 164, 177, 191,  --  11-20
            206, 222, 239, 247, 266, 286, 307, 329, 342, 366,  --  21-30
            391, 407, 434, 462, 481, 511, 542, 564, 597, 621,  --  31-40
            656, 682, 719, 747, 786, 816, 857, 889, 922, 966,  --  41-50
            1001, 1037, 1084, 1122, 1161, 1201, 1252, 1294, 1337, 1381,  --  51-60
            1540, 1708, 1884, 2068, 2262, 2466, 2679, 2901, 3134, 3377,  --  61-70
        },
        --  MANA
        {
            60, 64, 84, 90, 112, 120, 129, 154, 165, 192,  --   1-10
            205, 219, 249, 265, 282, 315, 334, 354, 390, 412,  --  11-20
            435, 459, 499, 525, 552, 579, 621, 648, 675, 702,  --  21-30
            729, 756, 798, 825, 852, 879, 906, 933, 960, 987,  --  31-40
            1014, 1041, 1068, 1110, 1137, 1164, 1176, 1203, 1230, 1257,  --  41-50
            1284, 1311, 1338, 1365, 1392, 1419, 1446, 1458, 1485, 1512,  --  51-60
            1656, 1800, 1944, 2088, 2232, 2377, 2521, 2665, 2809, 2953,  --  61-70
        },
    },
    ["HUNTER"] = {
        --  STR
        {
            20, 20, 21, 21, 22, 22, 22, 23, 23, 24,  --   1-10
            24, 25, 25, 26, 26, 27, 27, 28, 28, 29,  --  11-20
            29, 30, 30, 31, 31, 32, 32, 33, 33, 34,  --  21-30
            34, 35, 36, 36, 37, 38, 38, 39, 39, 40,  --  31-40
            41, 41, 42, 43, 43, 44, 45, 46, 46, 47,  --  41-50
            48, 49, 49, 50, 51, 52, 53, 53, 54, 55,  --  51-60
            56, 57, 58, 58, 59, 60, 61, 62, 63, 64,  --  61-70
        },
        --  AGI
        {
            23, 24, 25, 27, 28, 29, 30, 31, 33, 34,  --   1-10
            35, 37, 38, 39, 41, 42, 43, 45, 46, 48,  --  11-20
            49, 51, 52, 54, 55, 57, 59, 60, 62, 64,  --  21-30
            65, 67, 69, 70, 72, 74, 76, 78, 80, 81,  --  31-40
            83, 85, 87, 89, 91, 93, 95, 98, 100, 102,  --  41-50
            104, 106, 108, 111, 113, 115, 118, 120, 123, 125,  --  51-60
            127, 130, 133, 135, 138, 140, 143, 146, 149, 151,  --  61-70
        },
        --  STA
        {
            21, 22, 23, 23, 24, 25, 26, 27, 28, 28,  --   1-10
            29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  --  11-20
            39, 40, 41, 42, 43, 44, 45, 46, 47, 48,  --  21-30
            50, 51, 52, 53, 54, 56, 57, 58, 59, 61,  --  31-40
            62, 63, 64, 66, 67, 69, 70, 71, 73, 74,  --  41-50
            76, 77, 79, 80, 82, 83, 85, 87, 88, 90,  --  51-60
            92, 93, 95, 97, 99, 100, 102, 104, 106, 108,  --  61-70
        },
        --  INT
        {
            20, 21, 21, 22, 22, 23, 23, 24, 24, 25,  --   1-10
            25, 26, 27, 27, 28, 28, 29, 30, 30, 31,  --  11-20
            32, 32, 33, 34, 34, 35, 36, 36, 37, 38,  --  21-30
            39, 39, 40, 41, 42, 43, 43, 44, 45, 46,  --  31-40
            47, 47, 48, 49, 50, 51, 52, 53, 54, 55,  --  41-50
            56, 57, 58, 59, 60, 61, 62, 63, 64, 65,  --  51-60
            66, 67, 68, 69, 71, 72, 73, 74, 75, 77,  --  61-70
        },
        --  SPI
        {
            21, 22, 22, 23, 23, 24, 24, 25, 26, 26,  --   1-10
            27, 28, 28, 29, 29, 30, 31, 32, 32, 33,  --  11-20
            34, 34, 35, 36, 37, 37, 38, 39, 40, 40,  --  21-30
            41, 42, 43, 44, 45, 46, 46, 47, 48, 49,  --  31-40
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  --  41-50
            60, 61, 62, 63, 64, 65, 67, 68, 69, 70,  --  51-60
            71, 72, 74, 75, 76, 77, 79, 80, 81, 83,  --  61-70
        },
        --  HEAL
        {
            26, 33, 40, 57, 64, 71, 78, 85, 92, 109,  --   1-10
            116, 123, 130, 138, 147, 157, 168, 180, 193, 207,  --  11-20
            222, 238, 255, 273, 292, 312, 333, 355, 378, 402,  --  21-30
            417, 443, 470, 498, 527, 547, 578, 610, 643, 667,  --  31-40
            702, 738, 775, 803, 842, 872, 913, 955, 988, 1032,  --  41-50
            1067, 1113, 1150, 1198, 1237, 1287, 1328, 1370, 1423, 1467,  --  51-60
            1633, 1819, 2056, 2393, 2595, 3059, 2904, 3651, 3811, 3568,  --  61-70
        },
        --  MANA
        {
            65, 70, 91, 98, 121, 130, 155, 166, 193, 206,  --   1-10
            235, 250, 266, 298, 316, 350, 370, 391, 428, 451,  --  11-20
            475, 515, 541, 568, 611, 640, 670, 715, 745, 775,  --  21-30
            805, 850, 880, 910, 940, 970, 1015, 1045, 1075, 1105,  --  31-40
            1135, 1180, 1210, 1240, 1270, 1300, 1330, 1360, 1390, 1420,  --  41-50
            1450, 1480, 1510, 1540, 1570, 1600, 1630, 1660, 1690, 1720,  --  51-60
            1886, 2053, 2219, 2385, 2552, 2718, 2884, 3050, 3217, 3383,  --  61-70
        },
    },
    ["PRIEST"] = {
        --  STR
        {
            20, 20, 20, 21, 21, 21, 21, 21, 21, 22,  --   1-10
            22, 22, 22, 22, 23, 23, 23, 23, 23, 24,  --  11-20
            24, 24, 24, 25, 25, 25, 25, 25, 26, 26,  --  21-30
            26, 26, 27, 27, 27, 28, 28, 28, 28, 29,  --  31-40
            29, 29, 29, 30, 30, 30, 31, 31, 31, 32,  --  41-50
            32, 32, 33, 33, 33, 34, 34, 34, 35, 35,  --  51-60
            35, 36, 36, 36, 37, 37, 38, 38, 38, 39,  --  61-70
        },
        --  AGI
        {
            20, 20, 20, 21, 21, 21, 21, 22, 22, 22,  --   1-10
            22, 23, 23, 23, 23, 24, 24, 24, 25, 25,  --  11-20
            25, 25, 26, 26, 26, 27, 27, 27, 28, 28,  --  21-30
            28, 29, 29, 29, 30, 30, 30, 31, 31, 31,  --  31-40
            32, 32, 33, 33, 33, 34, 34, 35, 35, 35,  --  41-50
            36, 36, 37, 37, 38, 38, 39, 39, 40, 40,  --  51-60
            40, 41, 41, 42, 43, 43, 44, 44, 45, 45,  --  61-70
        },
        --  STA
        {
            20, 20, 21, 21, 21, 22, 22, 22, 23, 23,  --   1-10
            24, 24, 24, 25, 25, 26, 26, 26, 27, 27,  --  11-20
            28, 28, 29, 29, 30, 30, 30, 31, 31, 32,  --  21-30
            32, 33, 33, 34, 34, 35, 36, 36, 37, 37,  --  31-40
            38, 38, 39, 39, 40, 41, 41, 42, 43, 43,  --  41-50
            44, 44, 45, 46, 46, 47, 48, 49, 49, 50,  --  51-60
            51, 51, 52, 53, 54, 55, 55, 56, 57, 58,  --  61-70
        },
        --  INT
        {
            22, 23, 24, 25, 27, 28, 29, 30, 31, 33,  --   1-10
            34, 35, 36, 38, 39, 40, 42, 43, 44, 46,  --  11-20
            47, 49, 50, 52, 53, 55, 56, 58, 59, 61,  --  21-30
            63, 64, 66, 68, 69, 71, 73, 75, 76, 78,  --  31-40
            80, 82, 84, 86, 88, 90, 92, 94, 96, 98,  --  41-50
            100, 102, 104, 106, 109, 111, 113, 115, 118, 120,  --  51-60
            122, 125, 127, 130, 132, 135, 137, 140, 143, 145,  --  61-70
        },
        --  SPI
        {
            23, 24, 25, 27, 28, 29, 30, 31, 33, 34,  --   1-10
            35, 37, 38, 39, 41, 42, 43, 45, 46, 48,  --  11-20
            49, 51, 52, 54, 55, 57, 59, 60, 62, 64,  --  21-30
            65, 67, 69, 70, 72, 74, 76, 78, 80, 81,  --  31-40
            83, 85, 87, 89, 91, 93, 95, 98, 100, 102,  --  41-50
            104, 106, 108, 111, 113, 115, 118, 120, 123, 125,  --  51-60
            127, 130, 133, 135, 138, 140, 143, 146, 149, 151,  --  61-70
        },
        --  HEAL
        {
            41, 47, 52, 67, 82, 87, 102, 117, 122, 137,  --   1-10
            142, 162, 172, 177, 192, 197, 212, 227, 232, 247,  --  11-20
            252, 268, 275, 293, 302, 322, 343, 355, 378, 392,  --  21-30
            417, 433, 460, 478, 507, 527, 548, 580, 603, 637,  --  31-40
            662, 698, 725, 763, 792, 822, 863, 895, 928, 972,  --  41-50
            1007, 1053, 1090, 1128, 1177, 1217, 1258, 1300, 1353, 1397,  --  51-60
            1557, 1738, 1916, 2101, 2295, 2495, 2719, 2936, 3160, 3391,  --  61-70
        },
        --  MANA
        {
            110, 119, 129, 140, 137, 150, 164, 179, 195, 212,  --   1-10
            215, 234, 254, 260, 282, 305, 329, 339, 365, 377,  --  11-20
            405, 434, 449, 480, 497, 530, 549, 584, 605, 627,  --  21-30
            665, 689, 728, 752, 776, 800, 839, 863, 887, 911,  --  31-40
            950, 974, 998, 1022, 1046, 1070, 1094, 1118, 1142, 1166,  --  41-50
            1190, 1214, 1238, 1262, 1271, 1295, 1319, 1343, 1352, 1376,  --  51-60
            1500, 1625, 1749, 1873, 1998, 2122, 2247, 2371, 2495, 2620,  --  61-70
        },
    },
    ["SHAMAN"] = {
        --  STR
        {
            21, 22, 22, 23, 24, 25, 26, 26, 27, 28,  --   1-10
            29, 30, 30, 31, 32, 33, 34, 35, 36, 37,  --  11-20
            38, 38, 39, 40, 41, 42, 43, 44, 45, 46,  --  21-30
            48, 49, 50, 51, 52, 53, 54, 55, 56, 58,  --  31-40
            59, 60, 61, 63, 64, 65, 66, 68, 69, 70,  --  41-50
            72, 73, 75, 76, 77, 79, 80, 82, 83, 85,  --  51-60
            87, 88, 90, 91, 93, 95, 96, 98, 100, 102,  --  61-70
        },
        --  AGI
        {
            20, 20, 21, 21, 22, 22, 22, 23, 23, 24,  --   1-10
            24, 25, 25, 26, 26, 27, 27, 28, 28, 29,  --  11-20
            29, 30, 30, 31, 31, 32, 32, 33, 33, 34,  --  21-30
            34, 35, 36, 36, 37, 38, 38, 39, 39, 40,  --  31-40
            41, 41, 42, 43, 43, 44, 45, 46, 46, 47,  --  41-50
            48, 49, 49, 50, 51, 52, 53, 53, 54, 55,  --  51-60
            56, 57, 58, 58, 59, 60, 61, 62, 63, 64,  --  61-70
        },
        --  STA
        {
            21, 22, 23, 24, 24, 25, 26, 27, 28, 29,  --   1-10
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39,  --  11-20
            40, 41, 42, 43, 45, 46, 47, 48, 49, 50,  --  21-30
            52, 53, 54, 55, 57, 58, 59, 61, 62, 63,  --  31-40
            65, 66, 68, 69, 71, 72, 74, 75, 77, 78,  --  41-50
            80, 81, 83, 85, 86, 88, 90, 91, 93, 95,  --  51-60
            96, 98, 99, 102, 104, 106, 108, 110, 112, 114,  --  61-70
        },
        --  INT
        {
            21, 22, 23, 23, 24, 25, 26, 27, 28, 28,  --   1-10
            29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  --  11-20
            39, 40, 41, 42, 43, 44, 45, 46, 47, 48,  --  21-30
            50, 51, 52, 53, 54, 56, 57, 58, 59, 61,  --  31-40
            62, 63, 64, 66, 67, 69, 70, 71, 73, 74,  --  41-50
            76, 77, 79, 80, 82, 83, 85, 87, 88, 90,  --  51-60
            93, 94, 96, 97, 99, 100, 102, 104, 106, 108,  --  61-70
        },
        --  SPI
        {
            22, 23, 24, 25, 26, 27, 28, 28, 29, 30,  --   1-10
            31, 32, 33, 34, 36, 37, 38, 39, 40, 41,  --  11-20
            42, 43, 44, 46, 47, 48, 49, 50, 52, 53,  --  21-30
            54, 56, 57, 58, 60, 61, 62, 64, 65, 67,  --  31-40
            68, 70, 71, 73, 74, 76, 77, 79, 81, 82,  --  41-50
            84, 86, 87, 89, 91, 93, 94, 96, 98, 100,  --  51-60
            102, 104, 106, 108, 110, 112, 114, 116, 118, 120,  --  61-70
        },
        --  HEAL
        {
            27, 34, 41, 48, 65, 72, 79, 86, 93, 100,  --   1-10
            107, 114, 121, 128, 135, 142, 150, 159, 169, 180,  --  11-20
            192, 205, 219, 234, 240, 257, 275, 294, 314, 335,  --  21-30
            347, 370, 394, 419, 435, 462, 490, 509, 539, 570,  --  31-40
            592, 625, 649, 684, 710, 747, 775, 814, 844, 885,  --  41-50
            917, 960, 994, 1029, 1075, 1112, 1150, 1199, 1239, 1280,  --  51-60
            1428, 1583, 1760, 1932, 2114, 2304, 2504, 2713, 2920, 3159,  --  61-70
        },
        --  MANA
        {
            55, 61, 68, 91, 100, 110, 121, 133, 161, 175,  --   1-10
            190, 206, 223, 241, 260, 280, 301, 323, 346, 370,  --  11-20
            395, 421, 448, 476, 505, 535, 566, 598, 631, 665,  --  21-30
            699, 733, 767, 786, 820, 854, 888, 922, 941, 975,  --  31-40
            1009, 1028, 1062, 1096, 1115, 1149, 1183, 1202, 1236, 1255,  --  41-50
            1289, 1323, 1342, 1376, 1395, 1414, 1448, 1467, 1501, 1520,  --  51-60
            1664, 1808, 1951, 2095, 2239, 2383, 2527, 2670, 2814, 2958,  --  61-70
        },
    },
    ["MAGE"] = {
        --  STR
        {
            20, 20, 20, 20, 20, 21, 21, 21, 21, 21,  --   1-10
            21, 21, 21, 22, 22, 22, 22, 22, 22, 22,  --  11-20
            23, 23, 23, 23, 23, 23, 23, 24, 24, 24,  --  21-30
            24, 24, 24, 25, 25, 25, 25, 25, 26, 26,  --  31-40
            26, 26, 26, 26, 27, 27, 27, 27, 28, 28,  --  41-50
            28, 28, 28, 29, 29, 29, 29, 30, 30, 30,  --  51-60
            30, 30, 31, 31, 31, 32, 32, 32, 32, 33,  --  61-70
        },
        --  AGI
        {
            20, 20, 20, 21, 21, 21, 21, 21, 21, 22,  --   1-10
            22, 22, 22, 22, 23, 23, 23, 23, 23, 24,  --  11-20
            24, 24, 24, 25, 25, 25, 25, 25, 26, 26,  --  21-30
            26, 26, 27, 27, 27, 28, 28, 28, 28, 29,  --  31-40
            29, 29, 29, 30, 30, 30, 31, 31, 31, 32,  --  41-50
            32, 32, 33, 33, 33, 34, 34, 34, 35, 35,  --  51-60
            35, 36, 36, 36, 37, 37, 38, 38, 38, 39,  --  61-70
        },
        --  STA
        {
            20, 20, 21, 21, 21, 21, 22, 22, 22, 23,  --   1-10
            23, 23, 24, 24, 24, 25, 25, 25, 26, 26,  --  11-20
            26, 27, 27, 28, 28, 28, 29, 29, 30, 30,  --  21-30
            30, 31, 31, 32, 32, 33, 33, 33, 34, 34,  --  31-40
            35, 35, 36, 36, 37, 37, 38, 38, 39, 39,  --  41-50
            40, 40, 41, 42, 42, 43, 43, 44, 44, 45,  --  51-60
            46, 46, 47, 47, 48, 49, 49, 50, 51, 51,  --  61-70
        },
        --  INT
        {
            23, 24, 25, 27, 28, 29, 30, 31, 33, 34,  --   1-10
            35, 37, 38, 39, 41, 42, 43, 45, 46, 48,  --  11-20
            49, 51, 52, 54, 55, 57, 59, 60, 62, 64,  --  21-30
            65, 67, 69, 70, 72, 74, 76, 78, 80, 81,  --  31-40
            83, 85, 87, 89, 91, 93, 95, 98, 100, 102,  --  41-50
            104, 106, 108, 111, 113, 115, 118, 120, 123, 125,  --  51-60
            127, 130, 133, 135, 138, 140, 143, 146, 149, 151,  --  61-70
        },
        --  SPI
        {
            22, 23, 24, 25, 27, 28, 29, 30, 31, 33,  --   1-10
            34, 35, 36, 38, 39, 40, 42, 43, 44, 46,  --  11-20
            47, 49, 50, 52, 53, 55, 56, 58, 59, 61,  --  21-30
            63, 64, 66, 68, 69, 71, 73, 75, 76, 78,  --  31-40
            80, 82, 84, 86, 88, 90, 92, 94, 96, 98,  --  41-50
            100, 102, 104, 106, 109, 111, 113, 115, 118, 120,  --  51-60
            122, 125, 127, 130, 132, 135, 137, 140, 143, 145,  --  61-70
        },
        --  HEAL
        {
            41, 47, 52, 67, 82, 97, 102, 117, 132, 137,  --   1-10
            152, 167, 172, 187, 202, 207, 222, 237, 242, 257,  --  11-20
            272, 277, 292, 298, 315, 333, 342, 362, 373, 395,  --  21-30
            418, 432, 457, 473, 500, 518, 547, 577, 598, 630,  --  31-40
            653, 687, 712, 748, 775, 813, 842, 882, 913, 955,  --  41-50
            988, 1032, 1067, 1103, 1150, 1188, 1237, 1277, 1328, 1370,  --  51-60
            1526, 1702, 1875, 2070, 2261, 2461, 2686, 2906, 3136, 3393,  --  61-70
        },
        --  MANA
        {
            100, 110, 121, 118, 131, 145, 160, 161, 178, 196,  --   1-10
            215, 220, 241, 263, 271, 295, 305, 331, 343, 371,  --  11-20
            385, 415, 431, 463, 481, 515, 535, 556, 592, 613,  --  21-30
            634, 670, 691, 712, 733, 754, 790, 811, 832, 853,  --  31-40
            874, 895, 916, 937, 958, 979, 1000, 1021, 1042, 1048,  --  41-50
            1069, 1090, 1111, 1117, 1138, 1159, 1165, 1186, 1192, 1213,  --  51-60
            1316, 1419, 1521, 1624, 1727, 1830, 1932, 2035, 2138, 2241,  --  61-70
        },
    },
    ["WARLOCK"] = {
        --  STR
        {
            20, 20, 21, 21, 21, 21, 22, 22, 22, 23,  --   1-10
            23, 23, 24, 24, 24, 25, 25, 25, 26, 26,  --  11-20
            26, 27, 27, 28, 28, 28, 29, 29, 30, 30,  --  21-30
            30, 31, 31, 32, 32, 33, 33, 33, 34, 34,  --  31-40
            35, 35, 36, 36, 37, 37, 38, 38, 39, 39,  --  41-50
            40, 40, 41, 42, 42, 43, 43, 44, 44, 45,  --  51-60
            46, 46, 47, 47, 48, 49, 49, 50, 51, 51,  --  61-70
        },
        --  AGI
        {
            20, 20, 21, 21, 21, 22, 22, 22, 23, 23,  --   1-10
            24, 24, 24, 25, 25, 26, 26, 26, 27, 27,  --  11-20
            28, 28, 29, 29, 30, 30, 30, 31, 31, 32,  --  21-30
            32, 33, 33, 34, 34, 35, 36, 36, 37, 37,  --  31-40
            38, 38, 39, 39, 40, 41, 41, 42, 43, 43,  --  41-50
            44, 44, 45, 46, 46, 47, 48, 49, 49, 50,  --  51-60
            51, 51, 52, 53, 54, 55, 55, 56, 57, 58,  --  61-70
        },
        --  STA
        {
            21, 22, 22, 23, 23, 24, 24, 25, 25, 26,  --   1-10
            26, 27, 27, 28, 29, 29, 30, 30, 31, 32,  --  11-20
            32, 33, 34, 34, 35, 36, 36, 37, 38, 38,  --  21-30
            39, 40, 41, 41, 42, 43, 44, 45, 45, 46,  --  31-40
            47, 48, 49, 50, 50, 51, 52, 53, 54, 55,  --  41-50
            56, 57, 58, 59, 60, 61, 62, 63, 64, 65,  --  51-60
            66, 67, 68, 69, 71, 72, 73, 74, 75, 76,  --  61-70
        },
        --  INT
        {
            22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  --   1-10
            33, 34, 35, 36, 37, 38, 40, 41, 42, 43,  --  11-20
            45, 46, 47, 49, 50, 51, 53, 54, 56, 57,  --  21-30
            58, 60, 61, 63, 64, 66, 68, 69, 71, 72,  --  31-40
            74, 76, 77, 79, 81, 83, 84, 86, 88, 90,  --  41-50
            92, 94, 96, 98, 100, 102, 104, 106, 108, 110,  --  51-60
            112, 114, 117, 119, 121, 123, 126, 128, 130, 133,  --  61-70
        },
        --  SPI
        {
            22, 23, 24, 25, 26, 27, 29, 30, 31, 32,  --   1-10
            33, 34, 36, 37, 38, 39, 41, 42, 43, 45,  --  11-20
            46, 47, 49, 50, 52, 53, 54, 56, 57, 59,  --  21-30
            61, 62, 64, 65, 67, 69, 70, 72, 74, 75,  --  31-40
            77, 79, 81, 82, 84, 86, 88, 90, 92, 94,  --  41-50
            96, 98, 100, 102, 104, 106, 108, 111, 113, 115,  --  51-60
            117, 120, 122, 124, 127, 129, 132, 134, 136, 139,  --  61-70
        },
        --  HEAL
        {
            23, 28, 43, 48, 63, 68, 83, 88, 103, 108,  --   1-10
            123, 128, 143, 148, 153, 168, 173, 189, 196, 204,  --  11-20
            223, 233, 244, 266, 279, 293, 318, 334, 351, 379,  --  21-30
            398, 418, 439, 471, 494, 518, 543, 569, 606, 634,  --  31-40
            663, 693, 724, 756, 799, 823, 868, 904, 941, 979,  --  41-50
            1018, 1058, 1089, 1131, 1184, 1228, 1273, 1319, 1366, 1414,  --  51-60
            1580, 1910, 1939, 2133, 2323, 2535, 2758, 2991, 3235, 3490,  --  61-70
        },
        --  MANA
        {
            90, 98, 107, 117, 128, 140, 153, 167, 182, 198,  --   1-10
            200, 218, 237, 257, 278, 300, 308, 332, 357, 383,  --  11-20
            395, 423, 452, 467, 498, 530, 548, 582, 602, 638,  --  21-30
            674, 695, 731, 752, 788, 809, 830, 866, 887, 923,  --  31-40
            944, 965, 1001, 1022, 1043, 1064, 1100, 1121, 1142, 1163,  --  41-50
            1184, 1205, 1226, 1247, 1268, 1289, 1310, 1331, 1352, 1373,  --  51-60
            1497, 1621, 1745, 1870, 1994, 2118, 2242, 2366, 2490, 2615,  --  61-70
        },
    },
    ["ROGUE"] = {
        --  STR
        {
            21, 22, 22, 23, 24, 24, 25, 26, 27, 27,  --   1-10
            28, 29, 30, 30, 31, 32, 33, 34, 35, 35,  --  11-20
            36, 37, 38, 39, 40, 41, 42, 43, 43, 44,  --  21-30
            45, 46, 47, 48, 49, 51, 52, 53, 54, 55,  --  31-40
            56, 57, 58, 59, 61, 62, 63, 64, 65, 67,  --  41-50
            68, 69, 70, 72, 73, 74, 76, 77, 79, 80,  --  51-60
            81, 83, 84, 86, 87, 89, 90, 92, 94, 95,  --  61-70
        },
        --  AGI
        {
            23, 24, 25, 27, 28, 29, 31, 32, 33, 35,  --   1-10
            36, 37, 39, 40, 42, 43, 44, 46, 48, 49,  --  11-20
            51, 52, 54, 55, 57, 59, 60, 62, 64, 66,  --  21-30
            67, 69, 71, 73, 75, 77, 78, 80, 82, 84,  --  31-40
            86, 88, 90, 93, 95, 97, 99, 101, 103, 106,  --  41-50
            108, 110, 113, 115, 117, 120, 122, 125, 127, 130,  --  51-60
            133, 135, 138, 141, 143, 146, 149, 152, 155, 158,  --  61-70
        },
        --  STA
        {
            21, 22, 22, 23, 24, 24, 25, 25, 26, 27,  --   1-10
            28, 28, 29, 30, 30, 31, 32, 33, 33, 34,  --  11-20
            35, 36, 37, 37, 38, 39, 40, 41, 42, 42,  --  21-30
            43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  --  31-40
            53, 54, 55, 56, 57, 58, 59, 60, 62, 63,  --  41-50
            64, 65, 66, 67, 69, 70, 71, 72, 74, 75,  --  51-60
            76, 78, 79, 80, 82, 83, 85, 86, 87, 89,  --  61-70
        },
        --  INT
        {
            20, 20, 20, 21, 21, 21, 21, 21, 21, 22,  --   1-10
            22, 22, 22, 22, 23, 23, 23, 23, 23, 24,  --  11-20
            24, 24, 24, 25, 25, 25, 25, 25, 26, 26,  --  21-30
            26, 26, 27, 27, 27, 28, 28, 28, 28, 29,  --  31-40
            29, 29, 29, 30, 30, 30, 31, 31, 31, 32,  --  41-50
            32, 32, 33, 33, 33, 34, 34, 34, 35, 35,  --  51-60
            35, 36, 36, 36, 37, 37, 38, 38, 38, 39,  --  61-70
        },
        --  SPI
        {
            20, 20, 21, 21, 21, 22, 22, 22, 23, 23,  --   1-10
            24, 24, 24, 25, 25, 26, 26, 26, 27, 27,  --  11-20
            28, 28, 29, 29, 30, 30, 30, 31, 31, 32,  --  21-30
            32, 33, 33, 34, 34, 35, 36, 36, 37, 37,  --  31-40
            38, 38, 39, 39, 40, 41, 41, 42, 43, 43,  --  41-50
            44, 44, 45, 46, 46, 47, 48, 49, 49, 50,  --  51-60
            51, 51, 52, 53, 54, 55, 55, 56, 57, 58,  --  61-70
        },
        --  HEAL
        {
            25, 32, 49, 56, 63, 80, 87, 104, 111, 118,  --   1-10
            125, 142, 149, 156, 173, 181, 190, 200, 221, 233,  --  11-20
            246, 260, 275, 301, 318, 336, 355, 375, 396, 428,  --  21-30
            451, 475, 500, 526, 553, 581, 610, 640, 671, 703,  --  31-40
            736, 770, 805, 841, 878, 916, 955, 995, 1026, 1068,  --  41-50
            1111, 1155, 1200, 1246, 1283, 1331, 1380, 1430, 1471, 1523,  --  51-60
            1712, 1879, 2077, 2285, 2489, 2717, 2941, 3190, 3450, 3704,  --  61-70
        },
        --  MANA
        nil
    },
    ["DRUID"] = {
        --  STR
        {
            21, 22, 22, 23, 23, 24, 24, 25, 25, 26,  --   1-10
            26, 27, 27, 28, 29, 29, 30, 30, 31, 32,  --  11-20
            32, 33, 34, 34, 35, 36, 36, 37, 38, 38,  --  21-30
            39, 40, 41, 41, 42, 43, 44, 45, 45, 46,  --  31-40
            47, 48, 49, 50, 50, 51, 52, 53, 54, 55,  --  41-50
            56, 57, 58, 59, 60, 61, 62, 63, 64, 65,  --  51-60
            66, 67, 68, 69, 71, 72, 73, 74, 75, 76,  --  61-70
        },
        --  AGI
        {
            20, 20, 21, 21, 22, 22, 23, 23, 24, 24,  --   1-10
            25, 25, 26, 26, 27, 27, 28, 29, 29, 30,  --  11-20
            30, 31, 32, 32, 33, 33, 34, 35, 35, 36,  --  21-30
            37, 37, 38, 39, 39, 40, 41, 41, 42, 43,  --  31-40
            44, 44, 45, 46, 47, 48, 48, 49, 50, 51,  --  41-50
            52, 53, 54, 54, 55, 56, 57, 58, 59, 60,  --  51-60
            61, 62, 63, 64, 65, 66, 67, 68, 69, 70,  --  61-70
        },
        --  STA
        {
            20, 21, 21, 22, 22, 23, 24, 24, 25, 25,  --   1-10
            26, 27, 27, 28, 29, 29, 30, 31, 31, 32,  --  11-20
            33, 34, 34, 35, 36, 37, 37, 38, 39, 40,  --  21-30
            41, 42, 42, 43, 44, 45, 46, 47, 48, 49,  --  31-40
            50, 51, 52, 52, 53, 54, 56, 57, 58, 59,  --  41-50
            60, 61, 62, 63, 64, 65, 66, 68, 69, 70,  --  51-60
            71, 72, 74, 75, 76, 78, 79, 80, 82, 83,  --  61-70
        },
        --  INT
        {
            22, 23, 24, 25, 26, 27, 28, 28, 29, 30,  --   1-10
            31, 32, 33, 34, 36, 37, 38, 39, 40, 41,  --  11-20
            42, 43, 44, 46, 47, 48, 49, 50, 52, 53,  --  21-30
            54, 56, 57, 58, 60, 61, 62, 64, 65, 67,  --  31-40
            68, 70, 71, 73, 74, 76, 77, 79, 81, 82,  --  41-50
            84, 86, 87, 89, 91, 93, 94, 96, 98, 100,  --  51-60
            102, 104, 106, 108, 110, 112, 114, 116, 118, 120,  --  61-70
        },
        --  SPI
        {
            22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  --   1-10
            33, 34, 35, 36, 37, 38, 40, 41, 42, 43,  --  11-20
            45, 46, 47, 49, 50, 51, 53, 54, 56, 57,  --  21-30
            58, 60, 61, 63, 64, 66, 68, 69, 71, 72,  --  31-40
            74, 76, 77, 79, 81, 83, 84, 86, 88, 90,  --  41-50
            92, 94, 96, 98, 100, 102, 104, 106, 108, 110,  --  51-60
            112, 114, 117, 119, 121, 123, 126, 128, 130, 133,  --  61-70
        },
        --  HEAL
        {
            34, 41, 58, 65, 82, 89, 96, 113, 120, 137,  --   1-10
            144, 151, 168, 175, 182, 199, 206, 214, 233, 243,  --  11-20
            254, 266, 289, 303, 318, 334, 361, 379, 398, 418,  --  21-30
            439, 461, 494, 518, 543, 569, 596, 624, 653, 683,  --  31-40
            714, 746, 779, 823, 858, 894, 921, 959, 998, 1038,  --  41-50
            1079, 1121, 1164, 1208, 1253, 1299, 1346, 1384, 1433, 1483,  --  51-60
            1649, 1831, 2010, 2462, 2422, 2640, 2860, 3102, 3339, 3614,  --  61-70
        },
        --  MANA
        {
            50, 57, 65, 74, 84, 95, 107, 120, 134, 149,  --   1-10
            165, 182, 200, 219, 239, 260, 282, 305, 329, 354,  --  11-20
            380, 392, 420, 449, 479, 509, 524, 554, 584, 614,  --  21-30
            629, 659, 689, 704, 734, 749, 779, 809, 824, 854,  --  31-40
            869, 899, 914, 944, 959, 989, 1004, 1019, 1049, 1064,  --  41-50
            1079, 1109, 1124, 1139, 1154, 1169, 1199, 1214, 1229, 1244,  --  51-60
            1357, 1469, 1582, 1694, 1807, 1919, 2032, 2145, 2257, 2370,  --  61-70
        },
    },
}
-- str agi sta int spi

function LibStats:GetBaseStats(class, race, level)
    self:argCheck(class, 2, "string", "number")
    self:argCheck(race, 3, "string", "number")
    self:argCheck(level, 4, "number")
    -- if class is a class string, convert to class id
    if type(class) == "number" and ClassNameToID[class] ~= nil then
        class = strupper(ClassNameToID[class])
    end

    if type(race) == "number" and RaceNameToID[race] ~= nil then
        race = strupper(RaceNameToID[race])
    end

    if level < 1 or level > 70 then
        return nil
    end

    -- get race diff
    local diff = RaceClassStatOffset[race]
    local stats = ClassBaseStat[class]

    local baseStats = {
        ["STR"] = stats[1][level] + diff[1],
        ["AGI"] = stats[2][level] + diff[2],
        ["STA"] = stats[3][level] + diff[3],
        ["INT"] = stats[4][level] + diff[4],
        ["SPI"] = stats[5][level] + diff[5],
        ["HP"] = stats[6][level],
        ["MP"] = stats[7] and stats[7][level] or 0
    }

    return baseStats
end

local BaseDodge = {
    0.7580, 0.6520, -5.4500, -0.5900, 3.1830, 1.6750, 3.4575, 2.0350, -1.8720,
}

function LibStats:GetBaseDodge(class)
    -- argCheck for invalid input
    self:argCheck(class, 2, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "DODGE"
    end
    return BaseDodge[class]--, "DODGE"
end



--=================--
-- Stat Conversion --
--=================--
-- Defense
-- armor
function LibStats:GetReductionFromArmor(armor, attackerLevel)
    local levelModifier = attackerLevel
    if ( levelModifier > 59 ) then
        levelModifier = levelModifier + (4.5 * (levelModifier - 59))
    end
    local temp = armor / (85 * levelModifier + 400)
    local armorReduction = temp / (1 + temp)
    -- caps at 75%
    if armorReduction > 0.75 then
        armorReduction = 0.75
    end
    if armorReduction < 0 then
        armorReduction = 0
    end
    return armorReduction
end

-- defense
function LibStats:GetEffectFromDefense(defense, attackerLevel)
    return (defense - attackerLevel * 5) * 0.04
end



-- Rating
local RatingBase = {
    [CR_WEAPON_SKILL] = 2.5,
    [CR_DEFENSE_SKILL] = 1.5,
    [CR_DODGE] = 12,
    [CR_PARRY] = 15,
    [CR_BLOCK] = 5,
    [CR_HIT_MELEE] = 10,
    [CR_HIT_RANGED] = 10,
    [CR_HIT_SPELL] = 8,
    [CR_CRIT_MELEE] = 14,
    [CR_CRIT_RANGED] = 14,
    [CR_CRIT_SPELL] = 14,
    [CR_HIT_TAKEN_MELEE] = 10, -- hit avoidance
    [CR_HIT_TAKEN_RANGED] = 10,
    [CR_HIT_TAKEN_SPELL] = 8,
    [CR_CRIT_TAKEN_MELEE] = 25, -- resilience
    [CR_CRIT_TAKEN_RANGED] = 25,
    [CR_CRIT_TAKEN_SPELL] = 25,
    [CR_HASTE_MELEE] = 15.77, -- changed in 2.2
    [CR_HASTE_RANGED] = 15.77, -- changed in 2.2
    [CR_HASTE_SPELL] = 15.77, -- changed in 2.2
    [CR_WEAPON_SKILL_MAINHAND] = 2.5,
    [CR_WEAPON_SKILL_OFFHAND] = 2.5,
    [CR_WEAPON_SKILL_RANGED] = 2.5,
    [CR_EXPERTISE] = 2.5,
    [CR_RESILIENCE] = 39.5
}

-- Formula reverse engineered by Whitetooth@Cenarius(US) (hotdogee [at] gmail [dot] com)
--  Parry Rating, Defense Rating, and Block Rating: Low-level players 
--   will now convert these ratings into their corresponding defensive 
--   stats at the same rate as level 34 players.
function LibStats:GetEffectFromRating(rating, id, level)
    -- if id is stringID then convert to numberID
    if type(id) == "string" and RatingNameToID[id] then
        id = RatingNameToID[id]
    end
    if (rating < 1) then
        return 0--, RatingIDToConvertedStat[id]
    end
    --2.4.3  Parry Rating, Defense Rating, and Block Rating: Low-level players 
    --   will now convert these ratings into their corresponding defensive 
    --   stats at the same rate as level 34 players.
    if (id == CR_DEFENSE_SKILL or id == CR_PARRY or id == CR_BLOCK) and level < 34 then
        level = 34
    end
    if level >= 60 then
        return rating/RatingBase[id]*((-3/82)*level+(131/41))--, RatingIDToConvertedStat[id]
    elseif level >= 10 then
        return rating/RatingBase[id]/((1/52)*level-(8/52))--, RatingIDToConvertedStat[id]
    else
        return rating/RatingBase[id]/((1/52)*10-(8/52))--, RatingIDToConvertedStat[id]
    end
end



-- STA
function LibStats:GetHealthFromSta(sta, level, bear)
    self:argCheck(sta, 2, "number")
    self:argCheck(level, 2, "number")
    bear = bear or false
    local o = math.min(20, sta)
    local c = math.max(0, sta - 20)
    local health = o + c * 10

    if bear then
        return health + level * 20 + 40
    else
        return health + level * 9 + 20
    end
end


-- STR
-- BlockValue
local BlockValuePerStr = {
    0.05, 0.05, 0, 0, 0, 0.05, 0, 0, 0,
}
function LibStats:GetBlockValueFromStr(str, class)
    self:argCheck(str, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "BLOCK_VALUE"
    end
    -- Calculate
    return str * BlockValuePerStr[class]--, "BLOCK_VALUE"
end

-- AP
local APPerStr = {
    2, 2, 1, 1, 1, 2, 1, 1, 2,
}
function LibStats:GetAPFromStr(str, class)
    self:argCheck(str, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "AP"
    end
    -- Calculate
    return str * APPerStr[class]--, "AP"
end

-- Agi
-- AP
local APPerAgi = {
    0, 0, 1, 1, 0, 0, 0, 0, 0,
}
function LibStats:GetAPFromAgi(agi, class)
    -- argCheck for invalid input
    self:argCheck(agi, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "AP"
    end
    -- Calculate
    return agi * APPerAgi[class]--, "AP"
end

-- RAP
local RAPPerAgi = {
    1, 0, 1, 1, 0, 0, 0, 0, 0,
}
function LibStats:GetRAPFromAgi(agi, class)
    -- argCheck for invalid input
    self:argCheck(agi, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "RANGED_AP"
    end
    -- Calculate
    return agi * RAPPerAgi[class]--, "RANGED_AP"
end

-- Dodge
local DodgePerAgi = {
    0.0333, 0.04, 0.04, 0.05, 0, 0.04, 0, 0, 0.0680,
}
function LibStats:GetDodgeFromAgi(agi, class)
    -- argCheck for invalid input
    self:argCheck(agi, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "DODGE"
    end
    -- Calculate
    return agi * DodgePerAgi[class]--, "DODGE"
end

-- CRIT
local CritPerAgi = {
    0.0303, 0.04, 0.025, 0.025, 0, 0.04, 0, 0, 0.04
}
function LibStats:GetCritFromAgi(agi, class)
    -- argCheck for invalid input
    self:argCheck(agi, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "MELEE_CRIT"
    end
    -- Calculate
    return agi * CritPerAgi[class]  --, "MELEE_CRIT"
end


-- INT
function LibStats:GetManaFromInt(int)
    self:argCheck(int, 2, "number")
    local o = math.min(20, int)
    local c = math.max(0, int - 20)
    return o + c * 15--, "MANA"
end

local SpellCritPerInt = {
     [1] = {0.0000, 0.0832, 0.0699, 0.0000, 0.1710, 0.1333, 0.1637, 0.1500, 0.1431, },
     [2] = {0.0000, 0.0793, 0.0666, 0.0000, 0.1636, 0.1272, 0.1574, 0.1435, 0.1369, },
     [3] = {0.0000, 0.0793, 0.0666, 0.0000, 0.1568, 0.1217, 0.1516, 0.1375, 0.1312, },
     [4] = {0.0000, 0.0757, 0.0635, 0.0000, 0.1505, 0.1217, 0.1411, 0.1320, 0.1259, },
     [5] = {0.0000, 0.0757, 0.0635, 0.0000, 0.1394, 0.1166, 0.1364, 0.1269, 0.1211, },
     [6] = {0.0000, 0.0724, 0.0608, 0.0000, 0.1344, 0.1120, 0.1320, 0.1222, 0.1166, },
     [7] = {0.0000, 0.0694, 0.0608, 0.0000, 0.1297, 0.1077, 0.1279, 0.1179, 0.1124, },
     [8] = {0.0000, 0.0694, 0.0583, 0.0000, 0.1254, 0.1037, 0.1240, 0.1138, 0.1124, },
     [9] = {0.0000, 0.0666, 0.0583, 0.0000, 0.1214, 0.1000, 0.1169, 0.1100, 0.1086, },
    [10] = {0.0000, 0.0666, 0.0559, 0.0000, 0.1140, 0.1000, 0.1137, 0.1065, 0.0984, },
    [11] = {0.0000, 0.0640, 0.0559, 0.0000, 0.1045, 0.0933, 0.1049, 0.0971, 0.0926, },
    [12] = {0.0000, 0.0616, 0.0538, 0.0000, 0.0941, 0.0875, 0.0930, 0.0892, 0.0851, },
    [13] = {0.0000, 0.0594, 0.0499, 0.0000, 0.0875, 0.0800, 0.0871, 0.0825, 0.0807, },
    [14] = {0.0000, 0.0574, 0.0499, 0.0000, 0.0784, 0.0756, 0.0731, 0.0767, 0.0750, },
    [15] = {0.0000, 0.0537, 0.0466, 0.0000, 0.0724, 0.0700, 0.0671, 0.0717, 0.0684, },
    [16] = {0.0000, 0.0537, 0.0466, 0.0000, 0.0684, 0.0666, 0.0639, 0.0688, 0.0656, },
    [17] = {0.0000, 0.0520, 0.0451, 0.0000, 0.0627, 0.0636, 0.0602, 0.0635, 0.0617, },
    [18] = {0.0000, 0.0490, 0.0424, 0.0000, 0.0597, 0.0596, 0.0568, 0.0600, 0.0594, },
    [19] = {0.0000, 0.0490, 0.0424, 0.0000, 0.0562, 0.0571, 0.0538, 0.0569, 0.0562, },
    [20] = {0.0000, 0.0462, 0.0399, 0.0000, 0.0523, 0.0538, 0.0505, 0.0541, 0.0516, },
    [21] = {0.0000, 0.0450, 0.0388, 0.0000, 0.0502, 0.0518, 0.0487, 0.0516, 0.0500, },
    [22] = {0.0000, 0.0438, 0.0388, 0.0000, 0.0470, 0.0500, 0.0460, 0.0493, 0.0477, },
    [23] = {0.0000, 0.0427, 0.0368, 0.0000, 0.0453, 0.0474, 0.0445, 0.0471, 0.0463, },
    [24] = {0.0000, 0.0416, 0.0358, 0.0000, 0.0428, 0.0459, 0.0422, 0.0446, 0.0437, },
    [25] = {0.0000, 0.0396, 0.0350, 0.0000, 0.0409, 0.0437, 0.0405, 0.0429, 0.0420, },
    [26] = {0.0000, 0.0387, 0.0341, 0.0000, 0.0392, 0.0424, 0.0390, 0.0418, 0.0409, },
    [27] = {0.0000, 0.0387, 0.0333, 0.0000, 0.0376, 0.0412, 0.0372, 0.0398, 0.0394, },
    [28] = {0.0000, 0.0370, 0.0325, 0.0000, 0.0362, 0.0394, 0.0338, 0.0384, 0.0384, },
    [29] = {0.0000, 0.0362, 0.0318, 0.0000, 0.0348, 0.0383, 0.0325, 0.0367, 0.0366, },
    [30] = {0.0000, 0.0347, 0.0304, 0.0000, 0.0333, 0.0368, 0.0312, 0.0355, 0.0346, },
    [31] = {0.0000, 0.0340, 0.0297, 0.0000, 0.0322, 0.0354, 0.0305, 0.0347, 0.0339, },
    [32] = {0.0000, 0.0333, 0.0297, 0.0000, 0.0311, 0.0346, 0.0294, 0.0333, 0.0325, },
    [33] = {0.0000, 0.0326, 0.0285, 0.0000, 0.0301, 0.0333, 0.0286, 0.0324, 0.0318, },
    [34] = {0.0000, 0.0320, 0.0280, 0.0000, 0.0289, 0.0325, 0.0278, 0.0311, 0.0309, },
    [35] = {0.0000, 0.0308, 0.0269, 0.0000, 0.0281, 0.0314, 0.0269, 0.0303, 0.0297, },
    [36] = {0.0000, 0.0303, 0.0264, 0.0000, 0.0273, 0.0304, 0.0262, 0.0295, 0.0292, },
    [37] = {0.0000, 0.0297, 0.0264, 0.0000, 0.0263, 0.0298, 0.0254, 0.0284, 0.0284, },
    [38] = {0.0000, 0.0287, 0.0254, 0.0000, 0.0256, 0.0289, 0.0248, 0.0277, 0.0276, },
    [39] = {0.0000, 0.0282, 0.0250, 0.0000, 0.0249, 0.0283, 0.0241, 0.0268, 0.0269, },
    [40] = {0.0000, 0.0273, 0.0241, 0.0000, 0.0241, 0.0272, 0.0235, 0.0262, 0.0256, },
    [41] = {0.0000, 0.0268, 0.0237, 0.0000, 0.0235, 0.0267, 0.0230, 0.0256, 0.0252, },
    [42] = {0.0000, 0.0264, 0.0237, 0.0000, 0.0228, 0.0262, 0.0215, 0.0248, 0.0244, },
    [43] = {0.0000, 0.0256, 0.0229, 0.0000, 0.0223, 0.0254, 0.0211, 0.0243, 0.0240, },
    [44] = {0.0000, 0.0256, 0.0225, 0.0000, 0.0216, 0.0248, 0.0206, 0.0236, 0.0233, },
    [45] = {0.0000, 0.0248, 0.0218, 0.0000, 0.0210, 0.0241, 0.0201, 0.0229, 0.0228, },
    [46] = {0.0000, 0.0245, 0.0215, 0.0000, 0.0206, 0.0235, 0.0197, 0.0224, 0.0223, },
    [47] = {0.0000, 0.0238, 0.0212, 0.0000, 0.0200, 0.0231, 0.0192, 0.0220, 0.0219, },
    [48] = {0.0000, 0.0231, 0.0206, 0.0000, 0.0196, 0.0226, 0.0188, 0.0214, 0.0214, },
    [49] = {0.0000, 0.0228, 0.0203, 0.0000, 0.0191, 0.0220, 0.0184, 0.0209, 0.0209, },
    [50] = {0.0000, 0.0222, 0.0197, 0.0000, 0.0186, 0.0215, 0.0179, 0.0204, 0.0202, },
    [51] = {0.0000, 0.0219, 0.0194, 0.0000, 0.0183, 0.0210, 0.0176, 0.0200, 0.0198, },
    [52] = {0.0000, 0.0216, 0.0192, 0.0000, 0.0178, 0.0207, 0.0173, 0.0195, 0.0193, },
    [53] = {0.0000, 0.0211, 0.0186, 0.0000, 0.0175, 0.0201, 0.0170, 0.0191, 0.0191, },
    [54] = {0.0000, 0.0208, 0.0184, 0.0000, 0.0171, 0.0199, 0.0166, 0.0186, 0.0186, },
    [55] = {0.0000, 0.0203, 0.0179, 0.0000, 0.0166, 0.0193, 0.0162, 0.0182, 0.0182, },
    [56] = {0.0000, 0.0201, 0.0177, 0.0000, 0.0164, 0.0190, 0.0154, 0.0179, 0.0179, },
    [57] = {0.0000, 0.0198, 0.0175, 0.0000, 0.0160, 0.0187, 0.0151, 0.0176, 0.0176, },
    [58] = {0.0000, 0.0191, 0.0170, 0.0000, 0.0157, 0.0182, 0.0149, 0.0172, 0.0173, },
    [59] = {0.0000, 0.0189, 0.0168, 0.0000, 0.0154, 0.0179, 0.0146, 0.0168, 0.0169, },
    [60] = {0.0000, 0.0185, 0.0164, 0.0000, 0.0151, 0.0175, 0.0143, 0.0165, 0.0164, },
    [61] = {0.0000, 0.0157, 0.0157, 0.0000, 0.0148, 0.0164, 0.0143, 0.0159, 0.0162, },
    [62] = {0.0000, 0.0153, 0.0154, 0.0000, 0.0145, 0.0159, 0.0143, 0.0154, 0.0157, },
    [63] = {0.0000, 0.0148, 0.0150, 0.0000, 0.0143, 0.0152, 0.0143, 0.0148, 0.0150, },
    [64] = {0.0000, 0.0143, 0.0144, 0.0000, 0.0139, 0.0147, 0.0142, 0.0143, 0.0146, },
    [65] = {0.0000, 0.0140, 0.0141, 0.0000, 0.0137, 0.0142, 0.0142, 0.0138, 0.0142, },
    [66] = {0.0000, 0.0136, 0.0137, 0.0000, 0.0134, 0.0138, 0.0138, 0.0135, 0.0137, },
    [67] = {0.0000, 0.0133, 0.0133, 0.0000, 0.0132, 0.0134, 0.0133, 0.0130, 0.0133, },
    [68] = {0.0000, 0.0131, 0.0130, 0.0000, 0.0130, 0.0131, 0.0131, 0.0127, 0.0131, },
    [69] = {0.0000, 0.0128, 0.0128, 0.0000, 0.0127, 0.0128, 0.0128, 0.0125, 0.0128, },
    [70] = {0.0000, 0.0125, 0.0125, 0.0000, 0.0125, 0.0125, 0.0125, 0.0122, 0.0125, },
    [71] = {0.0000, 0.0122, 0.0123, 0.0000, 0.0123, 0.0122, 0.0122, 0.0119, 0.0122, },
    [72] = {0.0000, 0.0120, 0.0120, 0.0000, 0.0121, 0.0120, 0.0119, 0.0116, 0.0120, },
    [73] = {0.0000, 0.0118, 0.0118, 0.0000, 0.0119, 0.0117, 0.0117, 0.0114, 0.0118, },
}

function LibStats:GetSpellCritFromInt(int, class, level)
    -- argCheck for invalid input
    self:argCheck(int, 2, "number")
    self:argCheck(class, 3, "nil", "string", "number")
    self:argCheck(level, 4, "nil", "number")
    -- if class is a class string, convert to class id
    if type(class) == "string" and ClassNameToID[strupper(class)] ~= nil then
        class = ClassNameToID[strupper(class)]
    -- if class is invalid input, default to player class
    elseif type(class) ~= "number" or class < 1 or class > 9 then
        return nil--, "SPELL_CRIT"
    end
    -- if level is invalid input, default to player level
    if type(level) ~= "number" or level < 1 or level > 73 then
        return nil--, "SPELL_CRIT"
    end
    -- Calculate
    return int * SpellCritPerInt[level][class]  --, "SPELL_CRIT"
end


function LibStats:GetManaFromInt(int)
    self:argCheck(int, 2, "number")
    local o = math.min(20, int)
    local c = math.max(0, int - 20)

    return o + c * 15
end

-- helpers
function LibStats:floor(x)
    return floor(x + 0.34)
end